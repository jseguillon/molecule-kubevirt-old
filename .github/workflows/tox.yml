name: tox

on:
  create:  # is used for publishing to TestPyPI
    tags:  # any tag regardless of its name, no branches
      - "**"
  push:  # only publishes pushes to the main branch to TestPyPI
    branches:  # any integration branch but not tag
      - "master"
  pull_request:
  release:
    types:
      - published  # It seems that you can publish directly without creating
  schedule:
    - cron: 1 0 * * *  # Run daily at 0:01 UTC

jobs:
  build:
    name: ${{ matrix.tox_env }}
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        include:
          - tox_env: lint
          # - tox_env: docs
          - tox_env: py36
            PREFIX: PYTEST_REQPASS=2
            PYTHON_BASE_IMAGE: python:3.6
            KUBERNETES_VERSION: v1.20.0
          - tox_env: py36-devel
            PREFIX: PYTEST_REQPASS=2
            PYTHON_BASE_IMAGE: python:3.6
            KUBERNETES_VERSION: v1.20.0
          - tox_env: py37
            PREFIX: PYTEST_REQPASS=2
            PYTHON_BASE_IMAGE: python:3.7
            KUBERNETES_VERSION: v1.20.0
          - tox_env: py38
            PREFIX: PYTEST_REQPASS=2
            PYTHON_BASE_IMAGE: python:3.8
            KUBERNETES_VERSION: v1.20.0
          - tox_env: py39
            PREFIX: PYTEST_REQPASS=2
            PYTHON_BASE_IMAGE: python:3.9
            KUBERNETES_VERSION: v1.20.0
          - tox_env: py39-devel
            PREFIX: PYTEST_REQPASS=2
            PYTHON_BASE_IMAGE: python:3.9
            KUBERNETES_VERSION: v1.20.0
          # TODO
          # - tox_env: packaging

    steps:
      - name: Check out code 
        uses: actions/checkout@v2

       # Even our lint and other envs need access to tox
      - name: Install a default Python
        uses: actions/setup-python@v2
        if: ${{ ! contains(matrix.tox_env, 'py') }}

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install tox
        if: ${{ ! contains(matrix.tox_env, 'py') }}

      - name: Run tox -e ${{ matrix.tox_env }}
        run: |
          echo "${{ matrix.PREFIX }} tox -e ${{ matrix.tox_env }}"
          ${{ matrix.PREFIX }} tox -e ${{ matrix.tox_env }}
        if: ${{ ! contains(matrix.tox_env, 'py') }}

      - name: Enable ipv4 and ipv6 forwarding
        run: |
          sudo sysctl -w net.ipv6.conf.all.forwarding=1
          sudo sysctl -w net.ipv4.ip_forward=1
        if: ${{ contains(matrix.tox_env, 'py') }}

      # TODO : split 
      - name: Install docker
        run: |
          . /etc/os-release
          ## FIXME Workaround for https://github.com/kubernetes/kubernetes/issues/61058
          ### And https://github.com/LiliC/travis-minikube/blob/e0f26f7b388057f51a0e2558afd5f990e07b6c49/.travis.yml#L11
          sudo mount --make-rshared /
          ### conntrack is required by kube 1.18
          sudo apt-get update
          sudo apt-get install -y conntrack
          # sudo systemctl stop apparmor
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          sudo apt-get update
          sudo apt-get -y -o Dpkg::Options::="--force-confnew" install docker-ce
          sudo apt install -y qemu qemu-kvm libvirt-daemon libvirt-clients bridge-utils virt-manager libvirt-daemon-system dnsmasq
          sudo systemctl restart libvirtd
          # Install network
          sudo mkdir -p /etc/cni/net.d
          # curl -qsSL https://raw.githubusercontent.com/containers/libpod/master/cni/87-podman-bridge.conflist | sudo tee /etc/cni/net.d/87-podman-bridge.conf
          curl -qsSL https://github.com/containernetworking/plugins/releases/download/v0.8.6/cni-plugins-linux-amd64-v0.8.6.tgz --output /tmp/cni.tgz
          sudo mkdir -p /usr/libexec/cni
          sudo tar -C /usr/libexec/cni -xvzf /tmp/cni.tgz
        if: ${{ contains(matrix.tox_env, 'py') }}

      - name: Tweak Ubuntu apparmor
        run: |
          sudo cat /etc/apparmor.d/usr.sbin.libvirtd
          tweak_qemu_apprarmor="$(head -n -1 /etc/apparmor.d/usr.sbin.libvirtd; echo "  /usr/libexec/qemu-kvm rmix,"; tail -1 /etc/apparmor.d/usr.sbin.libvirtd)"
          echo "$tweak_qemu_apprarmor"
          echo "$tweak_qemu_apprarmor" | sudo dd of=/etc/apparmor.d/usr.sbin.libvirtd 
          sudo cat /etc/apparmor.d/usr.sbin.libvirtd 
          sudo systemctl reload apparmor.service
        if: ${{ contains(matrix.tox_env, 'py') }}

      - name: Install kubectl
        run: |
          curl -LO https://storage.googleapis.com/kubernetes-release/release/${{ matrix.KUBERNETES_VERSION }}/bin/linux/amd64/kubectl; chmod +x ./kubectl
          sudo install kubectl /usr/local/bin
        if: ${{ contains(matrix.tox_env, 'py') }}

      - name: Install kind
        run: |
          curl -Lo ./kind "https://kind.sigs.k8s.io/dl/v0.9.0/kind-$(uname)-amd64" && chmod +x ./kind 
          sudo install kind /usr/local/bin
        if: ${{ contains(matrix.tox_env, 'py') }}

      - name: Create single node cluster
        run: |
          cat <<EOF | sudo kind create cluster -v7 --wait 1m --retain --config=-
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          networking:
            ipFamily: ipv4
          EOF
        if: ${{ contains(matrix.tox_env, 'py') }}

      - name: Wait and get Cluster status
        run: |
          # wait network is ready
          sudo kubectl wait --for=condition=ready pods --namespace=kube-system -l k8s-app=kube-dns
          sudo kubectl get nodes -o wide
          sudo kubectl get pods -A
        if: ${{ contains(matrix.tox_env, 'py') }}

      - name: Install kubevirt
        run: |          
          sudo kubectl create -f https://github.com/kubevirt/kubevirt/releases/download/v0.36.0/kubevirt-operator.yaml
          sudo kubectl create configmap kubevirt-config -n kubevirt --from-literal debug.useEmulation=true
          sudo kubectl create -f https://github.com/kubevirt/kubevirt/releases/download/v0.36.0/kubevirt-cr.yaml
        if: ${{ contains(matrix.tox_env, 'py') }}

      - name: Install virtcl
        run: |          
          export ARCH=linux-amd64
          curl -L -o virtctl https://github.com/kubevirt/kubevirt/releases/download/v0.36.0/virtctl-v0.36.0-${ARCH}
          chmod +x virtctl
          sudo install virtctl /usr/local/bin
        if: ${{ contains(matrix.tox_env, 'py') }}

      - name: Build molecule test container for ${{ matrix.tox_env }}
        run: |
          docker build --build-arg PYTHON_BASE_IMAGE=${{ matrix.PYTHON_BASE_IMAGE }} --build-arg KUBERNETES_VERSION=${{ matrix.KUBERNETES_VERSION }} . --file tools/Dockerfile  -t molecule_kubevirt_${{ matrix.tox_env }}:latest
          # FIXME : load is slow : set a private registry, as described here https://kind.sigs.k8s.io/docs/user/local-registry/
          sudo kind load docker-image molecule_kubevirt_${{ matrix.tox_env }}:latest
        if: ${{ contains(matrix.tox_env, 'py') }}

      - name: Push molecule test to Kind 
        run: |
          sudo kind load docker-image molecule_kubevirt_${{ matrix.tox_env }}:latest
        if: ${{ contains(matrix.tox_env, 'py') }}

      - name: Install kail 
        run: | 
          curl -SL https://github.com/boz/kail/releases/download/v0.15.0/kail_0.15.0_linux_amd64.tar.gz -o kail.tar.gz
          tar xf kail.tar.gz
          sudo install kail /usr/local/bin
        if: ${{ contains(matrix.tox_env, 'py') }}

      - name: Wait and get Kubevirt status
        run: |
          # wait network is ready
          sudo kubectl wait --for=condition=ready pods --namespace=kubevirt -l kubevirt.io=virt-operator 
          sudo kubectl wait --for=condition=ready pods --namespace=kubevirt -l kubevirt.io=virt-api || true
          sudo kubectl wait --for=condition=ready pods --namespace=kubevirt -l kubevirt.io=virt-controller || true
          sudo kubectl wait --for=condition=ready pods --namespace=kubevirt -l kubevirt.io=virt-handler || true
          sudo kubectl get nodes -o wide
          sudo kubectl get pods -A
        if: ${{ contains(matrix.tox_env, 'py') }}

      - name: Prepare Job
        run: | 
          # Service Account for Job
          sudo kubectl create -f tools/test-rolebinding.yaml
          # Configmap will be witinig untill it is deleted, telling one Pod ended the Job
          sudo kubectl create configmap molecule-job-running --from-literal status=Started
        if: ${{ contains(matrix.tox_env, 'py') }}
          
      - name: Start test Job
        run: | 
          cat <<EOF | sudo kubectl apply -f -
          ---
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: molecule
          spec:
            template:
              spec:
                serviceAccountName: molecule-kubevirt
                containers:
                - name: molecule
                  image: molecule_kubevirt_${{ matrix.tox_env }}
                  imagePullPolicy: IfNotPresent
                  command: [ "/bin/bash", "-c", "--" ]
                  args: ["tox -e ${{ matrix.tox_env }} -c /opt/molecule_kubevirt/tox.ini; kubectl create configmap molecule-result --from-literal exitCode=$? && kubectl delete configmap molecule-job-running"]
                  env: 
                    - name: PYTEST_REQPASS
                      value: "2" 
                restartPolicy: Never
            backoffLimit: 0
          EOF
          
          echo "Job launched"
        if: ${{ contains(matrix.tox_env, 'py') }}

      - name: Wait for Job to end and log Pods in default namespace
        run: | 
          # Wait for Job Pod to start
          sudo kubectl wait --for=condition=ready pods -l job-name=molecule --namespace default
          # FIXME : virtctl not working when detached => open issue/PR on kubevirt 
          ( sleep 180 && sudo virtctl console instance | tee /tmp/virtcl.txt || true ) &
          # Kail sends any logs from default namespace both to stdout and a log file
          ( sudo kail -n default 2>&1 | tee /tmp/kail.log || true ) &
          # Wait for molecule Job to delete configmap and notify one Job Pod as ran till the end
          sudo kubectl wait --for delete --timeout=15m  configmap/molecule-job-running
          # Exit of github action is the one set by molecule job in config map result
          exit $(sudo kubectl get configmap molecule-result -o "jsonpath={.data['exitCode']}")
        if: ${{ contains(matrix.tox_env, 'py') }}

      # FIXME : if always ? 
      - name: Export logs
        if: always()
        run: |
          mkdir -p /tmp/kind/logs
          sleep 30;
          sudo kubectl get events > /tmp/kind/logs/events.txt || true
          sudo kubectl describe jobs > /tmp/kind/logs/jobs.txt || true
          sudo kubectl describe cm > /tmp/kind/logs/cm.txt || true
          cp /tmp/kail.log /tmp/kind/logs || true
          cp /tmp/describes.txt /tmp/kind/logs || true
          sudo dmesg > /tmp/kind/logs/dmesg.txt || true
          sudo kind export logs /tmp/kind/logs || true
          sudo journalctl | cat > /tmp/kind/logs/journalctl.txt || true
          sudo chown -R $USER:$USER /tmp/kind/logs || true
        

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: kind-logs-${{ env.JOB_NAME }}-${{ github.run_id }}
          path: /tmp/kind/logs

  publish:
    name: Publish to PyPI registry
    needs:
      - build
    runs-on: ubuntu-latest

    env:
      PY_COLORS: 1
      TOXENV: packaging

    steps:
      - name: Switch to using Python 3.6 by default
        uses: actions/setup-python@v2
        with:
          python-version: 3.6
      - name: Install tox
        run: python -m pip install --user tox
      - name: Check out src from Git
        uses: actions/checkout@v2
        with:
          # Get shallow Git history (default) for release events
          # but have a complete clone for any other workflows.
          # Both options fetch tags but since we're going to remove
          # one from HEAD in non-create-tag workflows, we need full
          # history for them.
          fetch-depth: >-
            ${{
              (
                (
                  github.event_name == 'create' &&
                  github.event.ref_type == 'tag'
                ) ||
                github.event_name == 'release'
              ) &&
              1 || 0
            }}
      - name: Drop Git tags from HEAD for non-tag-create and non-release events
        if: >-
          (
            github.event_name != 'create' ||
            github.event.ref_type != 'tag'
          ) &&
          github.event_name != 'release'
        run: >-
          git tag --points-at HEAD
          |
          xargs git tag --delete
      - name: Build dists
        run: python -m tox
      - name: Publish to test.pypi.org
        if: >-
          (
            github.event_name == 'push' &&
            github.ref == format(
              'refs/heads/{0}', github.event.repository.default_branch
            )
          ) ||
          (
            github.event_name == 'create' &&
            github.event.ref_type == 'tag'
          )
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.testpypi_password }}
          repository_url: https://test.pypi.org/legacy/
      - name: Publish to pypi.org
        if: >-  # "create" workflows run separately from "push" & "pull_request"
          github.event_name == 'release'
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.pypi_password }}